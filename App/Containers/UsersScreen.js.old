import React, { Component } from 'react'
import {
    View,
    Text,
    ListView,
    TouchableOpacity } from 'react-native'
import { connect } from 'react-redux'
// Add Actions - replace 'Your' with whatever your reducer is called :)
// import YourActions from '../Redux/YourRedux'
import UserActions from '../Redux/UsersRedux'

// Styles
import styles from './Styles/UsersScreenStyle'

class UsersScreen extends React.Component {

    constructor (props) {
        super(props)

        const dataObjects = [].concat(this.props.users).sort((a, b) => a.id > b.id)
//        const dataObjects.sort((a, b) => Number(a.id) - Number(b.id))
        const rowHasChanged = (r1, r2) => r1 !== r2

        this.ds = new ListView.DataSource({rowHasChanged})

        this.state = {
            dataSource: this.ds.cloneWithRows(dataObjects)
        }
    }

    renderRow (rowData) {
        // You can condition on sectionID (key as string), for different cells
        // in different sections
        return (
            <TouchableOpacity onPress={this._onPressButton}>
                <View style={styles.btnList}>
                    <Text style={styles.btnHeader}>{rowData.name}</Text>
                    <View style={styles.btnInfo}>
                        <View style={styles.btnInfoLeft}>
                        </View>
                        <View style={styles.btnInfoRight}>
                            <Text>Cell: {rowData.mobile_phone}</Text>
                            <Text>Work: {rowData.work_phone}</Text>
                        </View>
                    </View>
                </View>
            </TouchableOpacity>
        )
    }

    noRowData () {
        return this.state.dataSource.getRowCount() === 0
    }

    renderHeader (data, sectionID) {
        return <View style={styles.sectionHeader}><Text style={styles.boldLabel}>First Section</Text></View>
    }

    render () {
        return (
            <View style={styles.container}>
                <Text style={styles.headerText}>Users Screen</Text>
                <ListView
                  contentContainerStyle={styles.listContent}
                  dataSource={this.state.dataSource}
                  onLayout={this.onLayout}
                  renderRow={this.renderRow}
                  enableEmptySections
                />
            </View>
        )
    }
}

const mapStateToProps = (state) => {

    return {
        userId: state.login.userId,
        sessionId: state.login.sessionId,
        users: state.users.list,
        fetching: state.projects.fetching,
    }
}

const mapDispatchToProps = (dispatch) => {
    return {
    }
}

export default connect(mapStateToProps, mapDispatchToProps)(UsersScreen)
